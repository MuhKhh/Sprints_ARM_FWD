#include "../include/STD_TYPES.h"
#include "../include/BIT_MATH.h"

#include "../include/GPIO_interface.h"
#include "../include/SSD_interface.h"

void SSD_vInit(void) {
#if SSD1 == ENABLE
	MGPIO_vSetPinDir(SSD1_PORT_PINA	 , SSD1_PINA , PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
	MGPIO_vSetPinDir(SSD1_PORT_PINB	 , SSD1_PINB , PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
	MGPIO_vSetPinDir(SSD1_PORT_PINC	 , SSD1_PINC , PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
	MGPIO_vSetPinDir(SSD1_PORT_PIND	 , SSD1_PIND , PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
	MGPIO_vSetPinDir(SSD1_PORT_PINE	 , SSD1_PINE , PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
	MGPIO_vSetPinDir(SSD1_PORT_PINF	 , SSD1_PINF , PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
	MGPIO_vSetPinDir(SSD1_PORT_PING	 , SSD1_PING , PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
	MGPIO_vSetPinDir(SSD1_PORT_PINDot,SSD1_PINDot, PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
#endif // SSD1 == ENABLE

#if SSD2 == ENABLE
	MGPIO_vSetPinDir(SSD2_PORT_PINA	 , SSD2_PINA  , PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
	MGPIO_vSetPinDir(SSD2_PORT_PINB	 , SSD2_PINB  , PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
	MGPIO_vSetPinDir(SSD2_PORT_PINC	 , SSD2_PINC  , PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
	MGPIO_vSetPinDir(SSD2_PORT_PIND	 , SSD2_PIND  , PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
	MGPIO_vSetPinDir(SSD2_PORT_PINE	 , SSD2_PINE  , PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
	MGPIO_vSetPinDir(SSD2_PORT_PINF	 , SSD2_PINF  , PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
	MGPIO_vSetPinDir(SSD2_PORT_PING	 , SSD2_PING  , PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
	MGPIO_vSetPinDir(SSD2_PORT_PINDot, SSD2_PINDot, PIN_OUTPUT, PIN_OUTPUT_PP_LOW_SPEED);
#endif // SSD2 == ENABLE
}

#if SSD1 == ENABLE
void SSD1_vDisplayNum(u8 A_u8Num) {
	MGPIO_vSetPinVal(SSD1_PORT_PINA	 , SSD1_PINA  , GET_BIT(A_u8Num, 0));
	MGPIO_vSetPinVal(SSD1_PORT_PINB	 , SSD1_PINB  , GET_BIT(A_u8Num, 1));
	MGPIO_vSetPinVal(SSD1_PORT_PINC	 , SSD1_PINC  , GET_BIT(A_u8Num, 2));
	MGPIO_vSetPinVal(SSD1_PORT_PIND	 , SSD1_PIND  , GET_BIT(A_u8Num, 3));
	MGPIO_vSetPinVal(SSD1_PORT_PINE	 , SSD1_PINE  , GET_BIT(A_u8Num, 4));
	MGPIO_vSetPinVal(SSD1_PORT_PINF	 , SSD1_PINF  , GET_BIT(A_u8Num, 5));
	MGPIO_vSetPinVal(SSD1_PORT_PING	 , SSD1_PING  , GET_BIT(A_u8Num, 6));
	MGPIO_vSetPinVal(SSD1_PORT_PINDot, SSD1_PINDot, GET_BIT(A_u8Num, 7));
}
#endif // SSD1 == ENABLE

#if SSD2 == ENABLE
void SSD2_vDisplayNum(u8 A_u8Num) {
	MGPIO_vSetPinVal(SSD2_PORT_PINA	 , SSD2_PINA  , GET_BIT(A_u8Num, 0));
	MGPIO_vSetPinVal(SSD2_PORT_PINB	 , SSD2_PINB  , GET_BIT(A_u8Num, 1));
	MGPIO_vSetPinVal(SSD2_PORT_PINC	 , SSD2_PINC  , GET_BIT(A_u8Num, 2));
	MGPIO_vSetPinVal(SSD2_PORT_PIND	 , SSD2_PIND  , GET_BIT(A_u8Num, 3));
	MGPIO_vSetPinVal(SSD2_PORT_PINE	 , SSD2_PINE  , GET_BIT(A_u8Num, 4));
	MGPIO_vSetPinVal(SSD2_PORT_PINF	 , SSD2_PINF  , GET_BIT(A_u8Num, 5));
	MGPIO_vSetPinVal(SSD2_PORT_PING	 , SSD2_PING  , GET_BIT(A_u8Num, 6));
	MGPIO_vSetPinVal(SSD2_PORT_PINDot, SSD2_PINDot, GET_BIT(A_u8Num, 7));
}
#endif // SSD2 == ENABLE



